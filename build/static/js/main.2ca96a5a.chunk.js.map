{"version":3,"sources":["Components/Login.js","actions/loginActions.js","Components/Register.js","actions/registerActions.js","utils/PrivateRoute.js","Components/ItemList.js","App.js","serviceWorker.js","reducers/loginReducer.js","reducers/registerReducer.js","index.js"],"names":["connect","state","user","isLoading","err","error","loginAction","dispatch","type","console","log","axios","post","then","res","localStorage","setItem","data","token","payload","catch","props","useState","username","password","setUser","handleChanges","e","preventDefault","target","name","value","onSubmit","placeholder","onChange","to","isRegistrating","registerAction","newUser","setNewUser","PrivateRoute","Component","component","rest","render","getItem","ItemList","setItems","useEffect","get","App","className","exact","path","Login","Register","Boolean","window","location","hostname","match","initialState","rootReducer","combineReducers","loginReducer","action","registerReducer","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2ca96a5a.chunk.js","sourcesContent":["import React,{useState} from \"react\";\n\nimport {connect} from \"react-redux\";\nimport {loginAction} from \"../actions/loginActions\";\n\nimport { Link } from \"react-router-dom\"\n\nconst Login = (props) => {\n\n    const [user, setUser]=useState({\n        username:'',\n        password: ''\n    });\n\n    const handleChanges = e => {\n        e.preventDefault()\n        setUser({...user,[e.target.name]: e.target.value})\n    }\n\n  const login = e => {\n      e.preventDefault();\n      props.loginAction(user)\n  }\n\n    return (\n       \n        <div>\n            <form onSubmit={login}>\n            <label> Username\n                <input \n                    name=\"username\"\n                    type=\"text\"\n                    placeholder=\"User Name\"\n                    onChange={handleChanges} \n                />\n                </label>\n                <label> Password\n                <input \n                    name=\"password\"\n                    type=\"password\"\n                    placeholder=\"Password\"\n                    onChange={handleChanges} \n                />\n                </label>\n                <button type=\"submit\">Sign in</button>\n            </form>\n            <div>\n                <h3>Don't have an Account?</h3>\n                <Link to=\"/register\"> Register Here</Link>\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        user: state.user,\n        isLoading: state.isLoading,\n        err: state.error  \n    }\n}\n\nexport default connect(mapStateToProps, {loginAction})(Login);","import axios from \"axios\"\n\nexport const LOGIN_START = \"LOGIN_START\"\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\"\nexport const LOGIN_FAILURE = \"LOGIN_FAILURE\"\n\n\nexport const loginAction = user => {\n    return dispatch => {\n        dispatch({type: LOGIN_START})\n        console.log(user)\n        return axios\n        .post(\"https://africa-marketplace.herokuapp.com/auth/login\", user)\n        .then(res => {\n            localStorage.setItem('token', res.data.token)\n            console.log(res)\n            return dispatch({type: LOGIN_SUCCESS, payload:res.data})\n            \n        })\n        .catch(err => {\n            dispatch({type: LOGIN_FAILURE, payload: err})\n        })\n\n    }\n}\n\n\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\"\n\nimport {connect} from \"react-redux\";\n\nimport {registerAction} from \"../actions/registerActions\";\n\n\nconst Register = (props) => {\n\nconst [newUser,setNewUser] = useState({\n    username: '',\n    password: ''\n})\n\n    const handleChanges = e => {\n        e.preventDefault();\n        setNewUser({...newUser,[e.target.name]: e.target.value})\n    }\n\n\n    const signUp = e => {\n        e.preventDefault();\n        props.registerAction(newUser)\n    }\n\n\n\n    return (\n        //Registration Form goes here\n        <div>\n            <form onSubmit={signUp}>\n                {/* <label> Your Name\n                <input \n                    type=\"text\" \n                    name=\"name\" \n                    onChange={handleChanges} \n                />\n                </label>\n                <label> Your Email\n                <input \n                    type=\"text\" \n                    name=\"email\" \n                    onChange={handleChanges} \n                />\n                </label> */}\n                <label> Set a Username\n                <input \n                    type=\"text\" \n                    name=\"username\" \n                    onChange={handleChanges} \n                />\n                </label><label> Set a Password\n                <input \n                    type=\"password\" \n                    name=\"password\" \n                    onChange={handleChanges} \n                />\n                </label>\n                <button type=\"submit\">Sign Up</button>\n            </form>\n            <h5>Already have an account?</h5>\n            <Link to=\"/login\">Log In</Link>\n        </div>\n    )\n}\nconst mapstateToProps = state => {\n    return {\n        isRegistrating: state.isRegistrating,\n        err: state.err\n    }\n}\n\n\nexport default connect(mapstateToProps, {registerAction})(Register);\n","import axios from \"axios\";\n\nexport const REGISTER_START = \"REGISTER_START\";\nexport const REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\nexport const REGISTER_FAILURE = \"REGISTER_FAILURE\";\n\n\nexport const registerAction = user => {\n    return dispatch => {\n        dispatch({type: REGISTER_START});\n       return axios \n       \n        .post(\"https://africa-marketplace.herokuapp.com/auth/register/\", user)\n        .then(res => {\n            // localStorage.setItem('token', res.data.token)\n            dispatch({ type: REGISTER_SUCCESS, payload: res.data})\n            console.log(res)\n        })\n        .catch(err => {\n            dispatch({type: REGISTER_FAILURE, payload: err})\n        })\n    }\n       \n}\n\n","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n\n\n\nconst PrivateRoute = ({ component: Component, ...rest }) => {\n  return (\n    <Route\n      {...rest}\n      render={props => {\n        if (localStorage.getItem(\"token\")) {\n          return <Component {...props} />;\n        } else {\n          return <Redirect to=\"/login\" />;\n        }\n      }}\n    />\n  );\n};\nexport default PrivateRoute;","import React, { useState, useEffect } from \"react\"\nimport axios from \"axios\"\n\nconst ItemList = () => {\n\n    const [items, setItems] = useState()\n\n        useEffect(() => {\n            axios\n            .get(\"https://africa-marketplace.herokuapp.com/item\")\n            .then(res => {\n                setItems(res.data)\n                console.log(res.data)\n            })\n            .catch(err => console.log(err))\n     },[])\n\n\n\n    return (\n        <div>\n            {/* We are maping through the array of items here */}\n\n\n\n        </div>\n    )\n}\n\nexport default ItemList;","import React from 'react';\nimport './App.css';\n\nimport Login from \"./Components/Login\";\nimport Register from \"./Components/Register\";\nimport PrivateRoute from \"./utils/PrivateRoute\";\n\n\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\nimport ItemList from './Components/ItemList';\n\n\n\nfunction App() {\n  return (\n    <Router>\n    <div className=\"App\">\n      <Route exact path=\"/login\" component={Login}/>\n      <Route path =\"/register\" component={Register}/>\n\n      <PrivateRoute path=\"/item\" component={ItemList}/> \n      \n\n\n\n    </div>\n    </Router> \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {LOGIN_START,LOGIN_SUCCESS, LOGIN_FAILURE} from \"../actions/loginActions\";\n\nconst initialState =  {\n    user: [],\n    isLoading: false,\n    err: ''\n}\n\n\n\nexport const loginReducer = (state=initialState, action) => {\nswitch (action.payload) {\n    case LOGIN_START :\n        return {\n            ...state,\n            isLoading: true, \n        }\n        case LOGIN_SUCCESS :\n            return {\n                ...state,\n                isLoading: false,\n                user: action.payload\n            }\n        case LOGIN_FAILURE : \n        return {\n            ...state,\n            isLoading: false,\n            err: action.payload\n        }\n        \n    default:\n        return state;\n}\n\n\n}","import {REGISTER_START, REGISTER_SUCCESS, REGISTER_FAILURE} from \"../actions/registerActions\";\n\nconst initialState = {\n    isRegistrating: '',\n    err: ''\n}\n\nexport const registerReducer = (state=initialState, action) => {\n    switch(action.type) {\n        case REGISTER_START : \n            return {\n                ...state,\n                isRegistrating: true,\n            }\n        case REGISTER_SUCCESS : \n            return {\n                ...state,\n                isRegistrating: false,\n                user: action.payload\n            }\n        case REGISTER_FAILURE :\n            return {\n                ...state, \n                isRegistrating: false,\n                err: action.payload\n            }\n\n        default: \n        return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nimport { Provider } from \"react-redux\";\nimport {createStore, applyMiddleware, combineReducers} from \"redux\";\nimport thunk from \"redux-thunk\"\n\nimport {loginReducer} from \"./reducers/loginReducer\";\nimport {registerReducer} from \"./reducers/registerReducer\";\n\nconst rootReducer = combineReducers({\n    loginReducer,\n    registerReducer\n})\n\nconst store = createStore(rootReducer, applyMiddleware(thunk))\n\nReactDOM.render(\n<Provider store={store}> \n    <App />\n</Provider>, \ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}